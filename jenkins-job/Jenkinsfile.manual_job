pipeline {
    agent any

    environment {
        REPOPSITORY_URL = 'https://github.com/ltt204/spring-petclinic-microservices.git'
        CONFIG_REPO = 'https://github.com/ltt204/spring-petclinic-config.git'
        DEFAULT_TAG = 'latest'
        DEFAULT_BRANCH = 'main'
        NAMESPACE = 'dev'

        KUBE_CONFIG = 'kube-config'
    }

    parameters {
        string(name: 'customers-service', defaultValue: '', description: 'Branch of the customers service repository to build')
        string(name: 'vets-service', defaultValue: '', description: 'Branch of the vets service repository to build')
        string(name: 'visits-service', defaultValue: '', description: 'Branch of the visets service repository to build')
        string(name: 'genai-service', defaultValue: '', description: 'Branch of the genai service repository to build')
    }

    stages {
        stage('Check parameters') {
            steps {
                script {
                    if (!params.'customers-service' || !params.'vets-service' || !params.'visits-service' || !params.'genai-service') {
                        error 'Branches are not set, nothing to deploy. Cancel pipeline execution!'
                        env.skipPipeline = 'true'
                    }
                }
            }
        }

        stage('Checkout config repository') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                dir('dev_config') {
                    script {
                        git url: "${CONFIG_REPO}", branch: 'main', changelog: false, poll: false
                        sh 'git fetch --all --prune --quiet'
                    }
                }
            }
        }

        stage('Checkout repository') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                dir('dev_repo') {
                    script {
                        git url: "${REPOPSITORY_URL}", branch: 'main', changelog: false, poll: false
                        sh 'git fetch --all --prune --quiet'
                    }
                }
            }
        }
        
        stage('Resolve commit hashes') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                dir ('dev_repo') {
                    script {
                        def branches = [
                            'customers-service' : params.'customers-service'    ?: DEFAULT_BRANCH,
                            'vets-service'      : params.'vets-service'         ?: DEFAULT_BRANCH,
                            'visits-service'    : params.'visits-service'       ?: DEFAULT_BRANCH,
                            'genai-service'     : params.'genai-service'        ?: DEFAULT_BRANCH
                        ]
                        
                        def tag

                        branches.each { service, branch ->
                            echo "Resolving commit hash for ${service} branch ${branch}"
                            if (branch == 'main') {
                                tag = DEFAULT_TAG
                            } else {
                                tag = sh(script: "git rev-parse --short --verify origin/${branch}", returnStdout: true).trim()
                            }

                            def envVar = "${service.toUpperCase().replace('-', '_')}_TAG"
                            env[envVar] = tag
                            echo "Resolved ${service} tag: ${env[envVar]}"
                        }
                    }
                }
            }
        }

        
        stage('Deploy') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                script {
                    def charRoot = 'dev_config/helm-chart'
                    def charPath = "${charRoot}/dev"

                    echo "Deploying with branches: customers-service=${params.'customers-service'}, vets-service=${params.'vets-service'}, visits-service=${params.'visits-service'}, genai-service=${params.'genai-service'} into ${NAMESPACE} namespace"
                
                    def branches = [
                        'customers-service': params.'customers-service',
                        'vets-service': params.'vets-service',
                        'visits-service': params.'visits-service',
                        'genai-service': params.'genai-service'
                    ]
                    
                    def imageTags = branches.collect { service, branch ->
                        def envVar = "${service.toUpperCase().replace('-', '_')}_TAG"
                        "--set images.${service}.tag=${env[envVar]}"
                    }.join(' ')

                    withCredentials([
                        file(credentialsId: KUBE_CONFIG, variable: 'KUBE_CONFIG_FILE')
                    ]) {
                        sh '''
                            export KUBECONFIG=$KUBE_CONFIG_FILE
                            echo "Effective kubeconfig:"
                            kubectl config view
                            echo "Trying to get cluster version:"
                            kubectl version
                        '''
                        sh """
                            helm upgrade --install petclinic-dev ${charPath} \\
                                --namespace ${NAMESPACE} --create-namespace\\
                                -f $charPath/values.yaml \\
                                ${imageTags}
                                --debug
                        """
                    }
                }
            }
        }
    }
}