pipeline {
    agent any

    environment {
        REPOPSITORY_URL = 'https://github.com/ltt204/spring-petclinic-microservices.git'
        CONFIG_REPO = 'https://github.com/ltt204/spring-petclinic-config.git'
        DEFAULT_TAG = 'latest'
        NAMESPACE = 'dev'
    }

    parameters {
        string(name: 'customers-service', defaultValue: 'main', description: 'Branch of the customers service repository to build')
        string(name: 'vets-service', defaultValue: 'main', description: 'Branch of the vets service repository to build')
        string(name: 'visits-service', defaultValue: 'main', description: 'Branch of the visets service repository to build')
        string(name: 'genai-service', defaultValue: 'main', description: 'Branch of the genai service repository to build')
    }

    stages {
        stage('Check parameters') {
            steps {
                script {
                    if (!params.'customers-service' || !params.'vets-service' || !params.'visits-service' || !params.'genai-service') {
                        error 'Branches are not set, nothing to deploy. Cancel pipeline execution!'
                        env.skipPipeline = 'true'
                    }
                }
            }
        }

        stage('Checkout config repository') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                script {
                    echo "Checking out configuration repository ${CONFIG_REPO}"
                    sh "git clone ${CONFIG_REPO} dev_config"
                }
            }
        }

        stage('Checkout repository') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                script {
                    echo "Checking out repository ${REPOPSITORY_URL}"
                    sh "git clone ${REPOPSITORY_URL} repo"
                }
            }
        }
        
        stage('Resolve commit hashes') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                script {
                    def branches = [
                        'customers-service': params.'customers-service',
                        'vets-service': params.'vets-service',
                        'visits-service': params.'visits-service',
                        'genai-service': params.'genai-service'
                    ]
                    
                    def tag

                    branhes.each { service, branch ->
                        echo "Resolving commit hash for ${service} branch ${branch}"
                        if (branch == 'main') {
                            tag = DEFAULT_TAG
                        } else {
                            tag = sh(script: "git rev-parse --short --verify origin/${branch}", returnStdout: true).trim()
                        }

                        def envVar = "${service.toUpperCase().replace('-', '_')}_TAG"
                        env[envVar] = tag
                        echo "Resolved ${service} tag: ${env[envVar]}"
                    }
                }
            }
        }

        
        stage('Deploy') {
            when {
                expression { env.skipPipeline != 'true' }
            }
            steps {
                script {
                    def charRoot = 'dev_config/helm-chart'
                    def charPath = "${charRoot}/dev"

                    echo """
                    Deploying with branches: 
                        customers-service=${params.'customers-service'}, 
                        vets-service=${params.'vets-service'}, 
                        visits-service=${params.'visits-service'}, 
                        genai-service=${params.'genai-service'} into ${NAMESPACE} namespace
                    """
                
                    def branches = [
                        'customers-service': params.'customers-service',
                        'vets-service': params.'vets-service',
                        'visits-service': params.'visits-service',
                        'genai-service': params.'genai-service'
                    ]
                    
                    def imageTags = branches.collectEntries { service, branch ->
                        def tag = envVar = "${service.toUpperCase().replace('-', '_')}_TAG"
                        "--set images.${service}.tag =${env[tag]}"
                    }.join(' ')

                    sh """
                        helm upgrade --install petclinic-dev ${charPath} \\
                            --namespace ${NAMESPACE} \\
                            -f ${charPath}/values.yaml \\
                            --set namespace=${NAMESPACE} \\
                            ${imageTags}
                    """
                }
            }
        }
    }
}